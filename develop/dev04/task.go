package main

import (
	"fmt"
	"sort"
	"strings"
)

/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

func byteSumFor(str string) int {
	b := []byte(str)
	output := 0
	for _, v := range b {
		output += int(v)
	}
	return output
}

func showAnagrams(in []string) map[string][]string {
	var output = make(map[string][]string)
mainLoop:
	for _, v := range in {
		v = strings.ToLower(v) // Все слова должны быть приведены к нижнему регистру.
		// Смотрим наличие нужного ключа. Для этого преобразуем строку в байты и посчитаем сумму этих байт.
		sum := byteSumFor(v)
		for k := range output {
			if byteSumFor(k) == sum && len(k) == len(v) { // Находим в словаре нужное значение
				output[k] = append(output[k], v)
				continue mainLoop
			}
		}
		output[v] = make([]string, 0, 1) // Если не нашли, добавляем ключ и инициализируем ему массив
	}
	for k := range output {
		if len(output[k]) == 0 {
			delete(output, k) // удаляем лишние ключи
			continue
		}
		sort.Strings(output[k])
	}
	return output
}

func main() {
	var testArr = []string{"пятак", "пятка", "тяпка", "Капят", // Все ок
		"монетка", "катеном", // Два элемента
		"СЫР", // 1 элемент
		"листок", "слиток", "столик"}
	anagrams := showAnagrams(testArr)
	fmt.Println(anagrams)
}
